name: 'Z-Wave Bot: Issue created/edited'

on:
  issues:
    types: [opened, edited]

jobs:
  # Notify issue author when they post the wrong log
  ensure-logfile:
    runs-on: [ubuntu-latest]

    steps:
    - name: Checkout master branch
      uses: actions/checkout@v4

    - name: Extract log file from issue body
      uses: actions/github-script@v7
      id: extract
      with:
        github-token: ${{secrets.BOT_TOKEN}}
        result-encoding: string
        script: |
          const bot = require(`${process.env.GITHUB_WORKSPACE}/.github/bot-scripts/index.cjs`);
          const extractResult = await bot.extractLogfile({github, context});

          if (!extractResult) {
            // No log file required
            core.setOutput("shouldContinue", "false");
            return;
          }

          if (extractResult === "ERROR_FETCH" || extractResult === "ERROR_CODE_BLOCK_TOO_LONG") {
            core.setOutput("shouldContinue", "false");
            await bot.ensureLogfileFeedback({github, context}, extractResult);
            return;
          }

          core.setOutput("shouldContinue", "true");
          return extractResult;


    - name: Classify logfile using AI
      id: ai_detection
      if: steps.extract.outputs.shouldContinue == 'true'
      uses: actions/ai-inference@v1.1.0
      with:
        model: openai/gpt-4o-mini
        system-prompt: |
          You are a log file classifier for the Z-Wave JS project. Your task is to classify log files that users have uploaded, and check whether they uploaded the correct log files with the correct log level ("debug"). The log files you will typically encounter can be divided into the following groups:

          - Log files from Z-Wave JS with the correct log level
          - Log files from Z-Wave JS with the wrong log level
          - Log files from Z-Wave JS UI
          - Log files from Home Assistant
          - Unrelated log files

          ## Classification Criteria

          **Log files from Z-Wave JS:**
          Entries in these log files start with a date and time, a tag (typically DRIVER, CNTRLR, SERIAL and similar), optional direction arrows (» or «), and the actual log text.
          In multiline logs, everything but the log text is replaced with spaces.

          Here are some examples:
          ```
          2025-06-13 13:20:33.397 CNTRLR   Querying configured RF region...
          2025-06-13 13:20:33.398 DRIVER » [REQ] [SerialAPISetup]
                                            command: GetRFRegion
          2025-06-13 13:20:33.398 SERIAL » 0x0104000b20d0                                                       (6 bytes)
          2025-06-13 13:20:33.403 SERIAL « [ACK]                                                                   (0x06)
          2025-06-13 13:20:33.403 SERIAL « 0x0105010b200bdb                                                     (7 bytes)
          2025-06-13 13:20:33.404 SERIAL » [ACK]                                                                   (0x06)
          2025-06-13 13:20:33.405 DRIVER « [RES] [SerialAPISetup]
                                            command: GetRFRegion
                                            region:  Europe (Long Range)
          2025-06-13 13:20:33.406 CNTRLR   The controller is using RF region Europe (Long Range)
          ```

          To check if the log level is correct, look for lines containing `SERIAL »` and `SERIAL «`. Examples:
          ```
          2025-06-12 21:10:37.343 SERIAL » 0x01030015e9                                                         (5 bytes)
          2025-06-12 21:10:37.344 SERIAL « [ACK]                                                                   (0x06)
          2025-06-12 21:10:37.345 SERIAL « 0x011001155a2d5761766520362e3037000197                              (18 bytes)
          2025-06-12 21:10:37.345 SERIAL » [ACK]                                                                   (0x06)
          ```

          If you find these lines, the log level is correct.

          If you don't, the log level is most likely wrong.


          **Log files from Z-Wave JS UI:**
          Log entries from Z-Wave JS UI also start with the date and time, but are followed by the loglevel (INFO, DEBUG, ...), a tag (ZWAVE, GATEWAY, ...) and the log text. You will not find directional arrows in these logs.

          Example:
          ```
          2021-08-04 15:56:59.250 INFO MQTT: MQTT is disabled
          2021-08-04 15:56:59.503 INFO ZWAVE: Connecting to /dev/ttyACM0
          2021-08-04 15:57:09.381 INFO ZWAVE: Zwave driver is ready
          2021-08-04 15:57:09.387 INFO ZWAVE: Controller status: Driver ready
          ```


          **Log files from Home Assistant:**
          These log entries look quite different from the ones created by Z-Wave JS and Z-Wave JS UI. You may find references to `zwave_js` or `zwave_js_server` in them. For example:
          ```
          2025-06-13 13:32:31.856 INFO (MainThread) [homeassistant.components.zwave_js] Zwave-js-server logging is enabled
          2025-06-13 13:32:35.307 INFO (MainThread) [homeassistant.components.zwave_js] Disabling zwave_js server logging
          2025-06-13 13:32:35.307 INFO (MainThread) [homeassistant.components.zwave_js] Server logging is currently set to LogLevel.DEBUG as a result of server logging being enabled. It is now being reset to LogLevel.INFO
          2025-06-13 13:32:35.307 DEBUG (MainThread) [zwave_js_server] Publishing message:
          {'command': 'driver.update_log_config',
          'config': {'level': 'info'},
          'messageId': '60b4ebdaa4da498daf6d960712163f7d'}
          ```

          These logs may be interleaved with logs from Z-Wave JS, see above. Check if this is the case and include it in your classification.


          **Unrelated log files:**
          Any other log files that do not match the above patterns are considered unrelated.


          ## Rules

          1. Compare the given log file against the classification criteria.
          2. Respond with one of the following classifications:
            - Z-Wave JS: correct log level
            - Z-Wave JS: wrong log level
            - Z-Wave JS UI
            - Home Assistant: No Z-Wave JS
            - Home Assistant: Includes Z-Wave JS
            - Unrelated
          3. If you are not sure about the classification (less than 75% certainty), return "Unknown".
          4. Do not return anything else.
        
        prompt: |
          Analyze the following log file and classify it according to the rules above:

          ```
          ${{ steps.extract.outputs.result }}
          ```

        max-tokens: 100

    - name: Give feedback
      uses: actions/github-script@v7
      if: steps.extract.outputs.shouldContinue == 'true'
      id: feedback
      env:
        AI_RESPONSE: ${{ steps.ai_detection.outputs.response }}
      with:
        github-token: ${{secrets.BOT_TOKEN}}
        result-encoding: string
        script: |
          const aiResponse = process.env.AI_RESPONSE;
          console.log('Raw AI response:', JSON.stringify(aiResponse));

          let feedback = "UNKNOWN";
          switch (aiResponse) {
            case "Z-Wave JS: correct log level":
              feedback = "OK";
              break;
            case "Z-Wave JS: wrong log level":
              feedback = "WRONG_LOG_LEVEL";
              break;
            case "Z-Wave JS UI":
              feedback = "Z_UI";
              break;
            case "Home Assistant: No Z-Wave JS":
              feedback = "HA_ONLY";
              break;
            case "Home Assistant: Includes Z-Wave JS":
              feedback = "OK";
              break;
            case "Unrelated":
              feedback = "UNRELATED";
              break;
          }

          const bot = require(`${process.env.GITHUB_WORKSPACE}/.github/bot-scripts/index.cjs`);
          return bot.ensureLogfileFeedback({github, context}, feedback);
